# services:
#   # 각 서비스별 독립 데이터베이스
#   crawling-db:
#     image: mysql:8.0
#     container_name: crawling-mysql
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: 1234
#       MYSQL_DATABASE: crawling_db
#       MYSQL_USER: crawling_user
#       MYSQL_PASSWORD: 1234
#     ports:
#       - "3306:3306"
#     volumes:
#       - ./crawling-mysql-init:/docker-entrypoint-initdb.d
#       - ./crawling-mysql-data:/var/lib/mysql
#     command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#     networks:
#       - backend
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-ucrawling_user", "-p1234"]
#       interval: 5s
#       timeout: 5s
#       retries: 20
    
#   summary-db:
#     image: mysql:8.0
#     container_name: summary-mysql
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: 1234
#       MYSQL_DATABASE: summary_db
#       MYSQL_USER: summary_user
#       MYSQL_PASSWORD: 1234
#     ports:
#       - "3307:3306"
#     volumes:
#       - ./summary-mysql-init:/docker-entrypoint-initdb.d
#       - ./summary-mysql-data:/var/lib/mysql
#     command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#     networks:
#       - backend
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-usummary_user", "-p1234"]
#       interval: 5s
#       timeout: 5s
#       retries: 20
    
# article-db:
#   image: mysql:8.0
#   container_name: article-mysql
#   restart: always
#   environment:
#     MYSQL_ROOT_PASSWORD: 1234
#     MYSQL_DATABASE: article_db
#     MYSQL_USER: article_user
#     MYSQL_PASSWORD: 1234
#   ports:
#     - "3308:3306"
#   volumes:
#     - ./article-mysql-init:/docker-entrypoint-initdb.d
#     - ./article-mysql-data:/var/lib/mysql
#   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#   networks:
#     - backend
#   healthcheck:
#     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uarticle_user", "-p1234"]
#     interval: 5s
#     timeout: 5s
#     retries: 20
    
#   quiz-db:
#     image: mysql:8.0
#     container_name: quiz-mysql
#     restart: always
#     environment:
#       MYSQL_ROOT_PASSWORD: 1234
#       MYSQL_DATABASE: quiz_db
#       MYSQL_USER: quiz_user
#       MYSQL_PASSWORD: 1234
#     ports:
#       - "3309:3306"
#     volumes:
#       - ./quiz-mysql-init:/docker-entrypoint-initdb.d
#       - ./quiz-mysql-data:/var/lib/mysql
#     command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#     networks:
#       - backend
#     healthcheck:
#       test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uquiz_user", "-p1234"]
#       interval: 5s
#       timeout: 5s
#       retries: 20

#   # recap-db:
#   #   image: mysql:8.0
#   #   container_name: recap-mysql
#   #   restart: always
#   #   environment:
#   #     MYSQL_ROOT_PASSWORD: 1234
#   #     MYSQL_DATABASE: recap_db
#   #     MYSQL_USER: recap_user
#   #     MYSQL_PASSWORD: 1234
#   #   ports:
#   #     - "3310:3306"
#   #   volumes:
#   #     - ./recap-mysql-init:/docker-entrypoint-initdb.d
#   #     - ./recap-mysql-data:/var/lib/mysql
#   #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#   #   networks:
#   #     - backend
#   #   healthcheck:
#   #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-urecap_user", "-p1234"]
#   #     interval: 5s
#   #     timeout: 5s
#   #     retries: 20



#   # user-info-db:
#   #   image: mysql:8.0
#   #   container_name: user-info-mysql
#   #   restart: always
#   #   environment:
#   #     MYSQL_ROOT_PASSWORD: 1234
#   #     MYSQL_DATABASE: user_info_db
#   #     MYSQL_USER: user_info_user
#   #     MYSQL_PASSWORD: 1234
#   #   ports:
#   #     - "3312:3306"
#   #   volumes:
#   #     - ./user-info-mysql-init:/docker-entrypoint-initdb.d
#   #     - ./user-info-mysql-data:/var/lib/mysql
#   #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
#   #   networks:
#   #     - backend
#   #   healthcheck:
#   #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uuser_info_user", "-p1234"]
#   #     interval: 5s
#   #     timeout: 5s
#   #     retries: 20

#   kafka:
#     image: bitnami/kafka:latest
#     container_name: my-kafka
#     ports:
#       - "9092:9092"
#     environment:
#       - KAFKA_CFG_PROCESS_ROLES=controller,broker
#       - KAFKA_CFG_NODE_ID=1
#       - KAFKA_KRAFT_CLUSTER_ID=4K3q9VdZT16IJIlJXaBknQ
#       - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#       - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092
#       - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#       - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#       - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
#     networks:
#       - backend
#     healthcheck:
#       test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]

#   eureka-server:
#     build: ./eureka-server
#     container_name: eureka-server
#     ports:
#       - "8761:8761"
#     networks:
#       - backend

#   api-gateway:
#     build: ./api-gateway
#     container_name: api-gateway
#     depends_on:
#       - eureka-server
#     ports:
#       - "8080:8080"
#     environment:
#       - EUREKA_SERVER=http://eureka-server:8761/eureka/
#     networks:
#       - backend

#   crawling-server:
#     build: ./crawling-server
#     container_name: crawling-server
#     depends_on:
#       - eureka-server
#       - crawling-db
#       - kafka
#     ports:
#       - "9001:9001"
#     environment:
#       - EUREKA_SERVER=http://eureka-server:8761/eureka/
#       - SPRING_PROFILES_ACTIVE=prod
#       - SPRING_DATASOURCE_URL=jdbc:mysql://crawling-db:3306/crawling_db
#       - SPRING_DATASOURCE_USERNAME=crawling_user
#       - SPRING_DATASOURCE_PASSWORD=1234
#     networks:
#       - backend

#   summary-server:
#     build: ./summary-server
#     container_name: summary-server
#     depends_on:
#       - eureka-server
#       - summary-db
#       - kafka
#     ports:
#       - "9006:9006"
#     environment:
#       - EUREKA_SERVER=http://eureka-server:8761/eureka/
#       - SPRING_PROFILES_ACTIVE=prod
#       - SPRING_DATASOURCE_URL=jdbc:mysql://summary-db:3306/summary_db
#       - SPRING_DATASOURCE_USERNAME=summary_user
#       - SPRING_DATASOURCE_PASSWORD=1234
#     networks:
#       - backend
#     command: ["java", "-jar", "app.jar", "--spring.batch.job.names=newssummaryJob"]

#   # article-server:
#   #   build: ./article-server
#   #   container_name: article-server
#   #   depends_on:
#   #     - eureka-server
#   #     - article-db
#   #     - kafka
#   #   ports:
#   #     - "9002:9002"
#   #   environment:
#   #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
#   #     - SPRING_PROFILES_ACTIVE=prod
#   #     - SPRING_DATASOURCE_URL=jdbc:mysql://article-db:3306/article_db
#   #     - SPRING_DATASOURCE_USERNAME=article_user
#   #     - SPRING_DATASOURCE_PASSWORD=1234
#   #   networks:
#   #     - backend

#   quiz-server:
#     build: ./quiz-server
#     container_name: quiz-server
#     depends_on:
#       - eureka-server
#       - quiz-db
#       - kafka
#     ports:
#       - "9003:9003"
#     environment:
#       - EUREKA_SERVER=http://eureka-server:8761/eureka/
#       - SPRING_PROFILES_ACTIVE=prod
#       - SPRING_DATASOURCE_URL=jdbc:mysql://quiz-db:3306/quiz_db
#       - SPRING_DATASOURCE_USERNAME=quiz_user
#       - SPRING_DATASOURCE_PASSWORD=1234
#     networks:
#       - backend

#   # recap-server:
#   #   build: ./recap-server
#   #   container_name: recap-server
#   #   depends_on:
#   #     - eureka-server
#   #     - recap-db
#   #     - kafka
#   #   ports:
#   #     - "9004:9004"
#   #   environment:
#   #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
#   #     - SPRING_PROFILES_ACTIVE=prod
#   #     - SPRING_DATASOURCE_URL=jdbc:mysql://recap-db:3306/recap_db
#   #     - SPRING_DATASOURCE_USERNAME=recap_user
#   #     - SPRING_DATASOURCE_PASSWORD=1234
#   #   networks:
#   #     - backend



  
#   # user-info-server:
#   #   build: ./user-info-server
#   #   container_name: user-info-server
#   #   depends_on:
#   #     - eureka-server
#   #     - user-info-db
#   #     - kafka
#   #   ports:
#   #     - "9007:9007"
#   #   environment:
#   #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
#   #     - SPRING_PROFILES_ACTIVE=prod
#   #     - SPRING_DATASOURCE_URL=jdbc:mysql://user-info-db:3306/user_info_db
#   #     - SPRING_DATASOURCE_USERNAME=user_info_user
#   #     - SPRING_DATASOURCE_PASSWORD=1234
#   #   networks:
#   #     - backend

# networks:
#   backend:
#     driver: bridge
services:
  # ====================== Database Services ======================


  strike-db:
    image: mysql:8.0
    container_name: strike-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: strike_db
      MYSQL_USER: strike_user
      MYSQL_PASSWORD: 1234
    ports:
      - "3311:3306"
    volumes:
      - ./strike-mysql-init:/docker-entrypoint-initdb.d
      - ./strike-mysql-data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-ustrike_user", "-p1234"]
      interval: 5s
      timeout: 5s
      retries: 20

  user-info-db:
    image: mysql:8.0
    container_name: user-info-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: user_info_db
      MYSQL_USER: user_info_user
      MYSQL_PASSWORD: 1234
    ports:
      - "3312:3306"
    volumes:
      - ./user-info-mysql-init:/docker-entrypoint-initdb.d
      - ./user-info-mysql-data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uuser_info_user", "-p1234"]
      interval: 5s
      timeout: 5s
      retries: 20

  # crawling-db:
  #   image: mysql:8.0
  #   container_name: crawling-mysql
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 1234
  #     MYSQL_DATABASE: crawling_db
  #     MYSQL_USER: crawling_user
  #     MYSQL_PASSWORD: 1234
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./crawling-mysql-init:/docker-entrypoint-initdb.d
  #     - ./crawling-mysql-data:/var/lib/mysql
  #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   networks:
  #     - backend
  #   healthcheck:
  #     test: ["CMD-SHELL", "mysqladmin ping -h localhost -u crawling_user -p1234 | grep 'mysqld is alive' || exit 1"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 30

  # article-db:
  #   image: mysql:8.0
  #   container_name: article-mysql
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 1234
  #     MYSQL_DATABASE: article_db
  #     MYSQL_USER: article_user
  #     MYSQL_PASSWORD: 1234
  #   ports:
  #     - "3308:3306"
  #   volumes:
  #     - ./article-mysql-init:/docker-entrypoint-initdb.d
  #     - ./article-mysql-data:/var/lib/mysql
  #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   networks:
  #     - backend
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uarticle_user", "-p1234"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 20

  # summary-db:
  #   image: mysql:8.0
  #   container_name: summary-mysql
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 1234
  #     MYSQL_DATABASE: summary_db
  #     MYSQL_USER: summary_user
  #     MYSQL_PASSWORD: 1234
  #   ports:
  #     - "3307:3306"
  #   volumes:
  #     - ./summary-mysql-init:/docker-entrypoint-initdb.d
  #     - ./summary-mysql-data:/var/lib/mysql
  #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   networks:
  #     - backend
  #   healthcheck:
  #     test: ["CMD-SHELL", "mysqladmin ping -h localhost -u summary_user -p1234 | grep 'mysqld is alive' || exit 1"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 30

  # quiz-db:
  #   image: mysql:8.0
  #   container_name: quiz-mysql
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 1234
  #     MYSQL_DATABASE: quiz_db
  #     MYSQL_USER: quiz_user
  #     MYSQL_PASSWORD: 1234
  #   ports:
  #     - "3309:3306"
  #   volumes:
  #     - ./quiz-mysql-init:/docker-entrypoint-initdb.d
  #     - ./quiz-mysql-data:/var/lib/mysql
  #   command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
  #   networks:
  #     - backend
  #   healthcheck:
  #     test: ["CMD-SHELL", "mysqladmin ping -h localhost -u quiz_user -p1234 | grep 'mysqld is alive' || exit 1"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 30

  

  # ====================== Infrastructure Services ======================
  kafka:
    image: bitnami/kafka:latest
    container_name: my-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=4K3q9VdZT16IJIlJXaBknQ
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 20s
      retries: 15

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend

  # ====================== Application Services ======================
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      eureka-server:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka/
    networks:
      - backend


  strike-server:
    build: ./strike-server
    container_name: strike-server
    depends_on:
      - eureka-server
      - strike-db
      - kafka
    ports:
      - "9005:9005"
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka/
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://strike-db:3306/strike_db
      - SPRING_DATASOURCE_USERNAME=strike_user
      - SPRING_DATASOURCE_PASSWORD=1234
    networks:
      - backend

  user-info-server:
    build: ./user-info-server
    container_name: user-info-server
    depends_on:
      - eureka-server
      - user-info-db
      - kafka
    ports:
      - "9007:9007"
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka/
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://user-info-db:3306/user_info_db
      - SPRING_DATASOURCE_USERNAME=user_info_user
      - SPRING_DATASOURCE_PASSWORD=1234
    networks:
      - backend


  # crawling-server:
  #   build: ./crawling-server
  #   container_name: crawling-server
  #   depends_on:
  #     crawling-db:
  #       condition: service_healthy
  #     eureka-server:
  #       condition: service_started
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "9001:9001"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #     - SPRING_DATASOURCE_URL=jdbc:mysql://crawling-db:3306/crawling_db
  #     - SPRING_DATASOURCE_USERNAME=crawling_user
  #     - SPRING_DATASOURCE_PASSWORD=1234
  #   networks:
  #     - backend
      

  # summary-server:
  #   build: ./summary-server
  #   container_name: summary-server
  #   depends_on:
  #     summary-db:
  #       condition: service_healthy
  #     eureka-server:
  #       condition: service_started
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "9006:9006"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #     - SPRING_DATASOURCE_URL=jdbc:mysql://summary-db:3306/summary_db
  #     - SPRING_DATASOURCE_USERNAME=summary_user
  #     - SPRING_DATASOURCE_PASSWORD=1234
  #   networks:
  #     - backend
  #   command: ["java", "-jar", "app.jar", "--spring.batch.job.names=newssummaryJob"]

  # quiz-server:
  #   build: ./quiz-server
  #   container_name: quiz-server
  #   depends_on:
  #     quiz-db:
  #       condition: service_healthy
  #     eureka-server:
  #       condition: service_started
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "9003:9003"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #     - SPRING_DATASOURCE_URL=jdbc:mysql://quiz-db:3306/quiz_db
  #     - SPRING_DATASOURCE_USERNAME=quiz_user
  #     - SPRING_DATASOURCE_PASSWORD=1234
  #   networks:
  #     - backend

  # article-server:
  #   build: ./article-server
  #   container_name: article-server
  #   depends_on:
  #     - eureka-server
  #     - article-db
  #     - kafka
  #   ports:
  #     - "9002:9002"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #     - SPRING_DATASOURCE_URL=jdbc:mysql://article-db:3306/article_db
  #     - SPRING_DATASOURCE_USERNAME=article_user
  #     - SPRING_DATASOURCE_PASSWORD=1234
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

