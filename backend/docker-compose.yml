services:
  db:
    image: mysql:8.0
    container_name: my-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: mydb
      MYSQL_USER: myuser
      MYSQL_PASSWORD: 1234
    ports:
      - "3306:3306"
    volumes:
      - ./mysql-init:/docker-entrypoint-initdb.d
      - ./mysql-data:/var/lib/mysql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-umyuser", "-p1234"]
      interval: 5s
      timeout: 5s
      retries: 20

  kafka:
    image: bitnami/kafka:latest
    container_name: my-kafka
    ports:
      - "9092:9092"
    environment:
      # 필수 KRaft 설정
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=4K3q9VdZT16IJIlJXaBknQ
      # 컨트롤러 리스너 설정
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9093,PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # 보안 프로토콜 매핑
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # 초기 컨트롤러 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
    networks:
      - backend
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092"]

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    depends_on:
      - eureka-server
    ports:
      - "8080:8080"
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka/
    networks:
      - backend

  crawling-server:
    build: ./crawling-server
    container_name: crawling-server
    depends_on:
      - eureka-server
      - db
      - kafka
    ports:
      - "9001:9001"
    environment:
      - EUREKA_SERVER=http://eureka-server:8761/eureka/
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - backend
  summary-server:
      build: ./summary-server
      container_name: summary-server
      depends_on:
        - eureka-server
        - db
        - kafka
      ports:
        - "9006:9006"
      environment:
        - EUREKA_SERVER=http://eureka-server:8761/eureka/
        - SPRING_PROFILES_ACTIVE=prod
      networks:
        - backend
      command: ["java", "-jar", "app.jar", "--spring.batch.job.names=newssummaryJob"]

  # news-server:
  #   build: ./news-server
  #   container_name: news-server
  #   depends_on:
  #     - eureka-server
  #     - db
  #   ports:
  #     - "9002:9002"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - backend

  # quiz-server:
  #   build: ./quiz-server
  #   container_name: quiz-server
  #   depends_on:
  #     - eureka-server
  #     - db
  #     - kafka
  #   ports:
  #     - "9003:9003"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - backend

  # recap-server:
  #   build: ./recap-server
  #   container_name: recap-server
  #   depends_on:
  #     - eureka-server
  #   ports:
  #     - "9004:9004"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - backend

  # strike-server:
  #   build: ./strike-server
  #   container_name: strike-server
  #   depends_on:
  #     - eureka-server
  #   ports:
  #     - "9005:9005"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - backend

  
  # user-info-server:
  #   build: ./user-info-server
  #   container_name: user-info-server
  #   depends_on:
  #     - eureka-server
  #     - db
  #   ports:
  #     - "9007:9007"
  #   environment:
  #     - EUREKA_SERVER=http://eureka-server:8761/eureka/
  #     - SPRING_PROFILES_ACTIVE=prod
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge
